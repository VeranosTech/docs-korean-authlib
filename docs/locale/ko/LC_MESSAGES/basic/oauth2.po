# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Hsiaoming Ltd
# This file is distributed under the same license as the Authlib package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Authlib 0.12.dev\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-04-09 11:53+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../basic/oauth2.rst:1
msgid ""
"Understand the concepts in OAuth 2.0, the authorization flow, grant "
"types, roles, authentication methods and etc."
msgstr ""

#: ../../basic/oauth2.rst:1
msgid ""
"https://user-"
"images.githubusercontent.com/290496/48670041-e5803e00-eb53-11e8-91a9-3776276d6bf6.png"
msgstr ""

#: ../../basic/oauth2.rst:9
msgid "Understand OAuth 2.0"
msgstr ""

#: ../../basic/oauth2.rst:11
msgid ""
"The OAuth 2.0 authorization framework enables a third-party application "
"to obtain limited access to an HTTP service, either on behalf of a "
"resource owner by orchestrating an approval interaction between the "
"resource owner and the HTTP service, or by allowing the third-party "
"application to obtain access on its own behalf."
msgstr ""

#: ../../basic/oauth2.rst:17
msgid ""
"This section will help developers understand the concepts in OAuth 2.0, "
"but not in deep of OAuth 2.0. Here is an overview of a very simple OAuth "
"2.0 flow:"
msgstr ""

#: ../../basic/oauth2.rst:25
msgid "OAuth 2.0 Roles"
msgstr ""

#: ../../basic/oauth2.rst:27
msgid ""
"There are usually four roles in an OAuth 2.0 flow. Let's take GitHub as "
"an example, you are building an application to analyze one's code on "
"GitHub:"
msgstr ""

#: ../../basic/oauth2.rst:30
msgid ""
"**Client**: a client is a third-party application, in this case, it is "
"your application."
msgstr ""

#: ../../basic/oauth2.rst:33
msgid ""
"**Resource Owner**: the users and orgs on GitHub are the resource owners,"
" since they own their source code (resources)."
msgstr ""

#: ../../basic/oauth2.rst:36
msgid ""
"**Resource Server**: The API servers of GitHub. Your **client** will make"
" requests to the resource server to fetch source code. The server serves "
"resources."
msgstr ""

#: ../../basic/oauth2.rst:39
msgid ""
"**Authorization Server**: The server for **client** to obtain an access "
"token."
msgstr ""

#: ../../basic/oauth2.rst:42
msgid "OAuth 2.0 Flow"
msgstr ""

#: ../../basic/oauth2.rst:44
msgid ""
"The above image is a simplified version of an OAuth 2.0 authorization. "
"Let's take GitHub as an example. A user wants to use your application to "
"analyze his/her source code on GitHub."
msgstr ""

#: ../../basic/oauth2.rst:48
msgid "It usually takes these steps:"
msgstr ""

#: ../../basic/oauth2.rst:50
msgid "Your application (**client**) prompts the user to log in."
msgstr ""

#: ../../basic/oauth2.rst:51
msgid ""
"The user clicks the *login* button, your application will redirect to "
"GitHub's authorize page (**Authorization Server**)."
msgstr ""

#: ../../basic/oauth2.rst:53
msgid ""
"The user (he/she is a GitHub user, which means he/she is a **Resource "
"Owner**) clicks the *allow* button to tell GitHub that he/she granted the"
" access."
msgstr ""

#: ../../basic/oauth2.rst:55
msgid ""
"The **Authorization Server** issues an **access token** to your "
"application. (This step can contain several sub-steps)"
msgstr ""

#: ../../basic/oauth2.rst:57
msgid ""
"Your application uses the **access token** to fetch source code from "
"GitHub's **Resource Server**, analyze the source code and return the "
"result to your application user."
msgstr ""

#: ../../basic/oauth2.rst:61
msgid ""
"But there are more details inside the flow. The most important thing in "
"OAuth 2.0 is the authorization. A client obtains an access token from the"
" authorization server with the grant of the resource owner."
msgstr ""

#: ../../basic/oauth2.rst:66
msgid "Grant Types"
msgstr ""

#: ../../basic/oauth2.rst:70
msgid ""
"Authorization server MAY supports several **grant types** during the "
"**authorization**, step 1 and 2. A grant type defines a way of how the "
"authorization server will verify the request and issue the token."
msgstr ""

#: ../../basic/oauth2.rst:74
msgid "There are lots of built-in grant types in Authlib, including:"
msgstr ""

#: ../../basic/oauth2.rst:76
msgid ":class:`AuthorizationCodeGrant`"
msgstr ""

#: ../../basic/oauth2.rst:77
msgid ":class:`ImplicitGrant`"
msgstr ""

#: ../../basic/oauth2.rst:78
msgid ":class:`ResourceOwnerPasswordCredentialsGrant`"
msgstr ""

#: ../../basic/oauth2.rst:79
msgid ":class:`ClientCredentialsGrant`"
msgstr ""

#: ../../basic/oauth2.rst:80
msgid ":class:`RefreshTokenGrant`"
msgstr ""

#: ../../basic/oauth2.rst:81
msgid ":class:`JWTBearerGrant`"
msgstr ""

#: ../../basic/oauth2.rst:83
msgid ""
"Take ``authorization_code`` as an example, in step 2, when the resource "
"owner granted the access, **Authorization Server** will return a ``code``"
" to the client. The client can use this ``code`` to exchange an access "
"token:"
msgstr ""

#: ../../basic/oauth2.rst:100
msgid "Client Authentication Methods"
msgstr ""

#: ../../basic/oauth2.rst:102
msgid ""
"In the above code, there is an ``Authorization`` header; it contains the "
"information of the client. A client MUST provide its client information "
"to obtain an access token. There are several ways to provide this data, "
"for instance:"
msgstr ""

#: ../../basic/oauth2.rst:106
msgid ""
"``none``: The client is a public client which means it has no "
"client_secret"
msgstr ""

#: ../../basic/oauth2.rst:118
msgid "``client_secret_post``: The client uses the HTTP POST parameters"
msgstr ""

#: ../../basic/oauth2.rst:130
msgid "``client_secret_basic``: The client uses HTTP Basic Authorization"
msgstr ""

#: ../../basic/oauth2.rst:142
msgid ""
"There are more client authentication methods defined by OAuth 2.0 "
"extensions, including ``client_secret_jwt``, ``private_key_jwt``. They "
"can be found in section :ref:`jwt_client_authentication`."
msgstr ""

#: ../../basic/oauth2.rst:147
msgid "Token Scopes"
msgstr ""

#: ../../basic/oauth2.rst:149
msgid ""
"Scope is a very important concept in OAuth 2.0. An access token is "
"usually issued with limited scopes."
msgstr ""

#: ../../basic/oauth2.rst:152
msgid ""
"For instance, your \"source code analyzer\" application MAY only have "
"access to the public repositories of a GiHub user."
msgstr ""

#: ../../basic/oauth2.rst:156
msgid "Endpoints"
msgstr ""

#: ../../basic/oauth2.rst:158
msgid ""
"The above example only shows one endpoint, which is **token endpoint**. "
"There are more endpoints in OAuth 2.0. For example:"
msgstr ""

#: ../../basic/oauth2.rst:161
msgid ":ref:`Token Revocation Endpoint <specs/rfc7009>`"
msgstr ""

#: ../../basic/oauth2.rst:162
msgid ":ref:`Token Introspection Endpoint <specs/rfc7662>`"
msgstr ""

