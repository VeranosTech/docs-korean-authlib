# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Hsiaoming Ltd
# This file is distributed under the same license as the Authlib package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Authlib 0.12.dev\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-04-09 11:53+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../jose/jwk.rst:4
msgid "JSON Web Key (JWK)"
msgstr ""

#: ../../jose/jwk.rst:8
msgid ""
"A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data "
"structure that represents a cryptographic key. An example would help a "
"lot::"
msgstr ""

#: ../../jose/jwk.rst:19
msgid ""
"This is an Elliptic Curve Public Key represented by JSON data structure. "
"How do we ``dumps`` a key into JWK, and ``loads`` JWK back into key? The "
"interface of :class:`JWK` contains these two methods."
msgstr ""

#: ../../jose/jwk.rst:23
msgid ""
"Algorithms for ``kty`` (Key Type) is defined by :ref:`specs/rfc7518`. "
"Available ``kty`` values are: **EC**, **RSA** and **oct**. Initialize a "
"JWK instance with JWA::"
msgstr ""

#: ../../jose/jwk.rst:36
msgid ""
"There is an ``jwk`` instance in ``authlib.jose``, so that you don't need "
"to initialize JWK yourself, try::"
msgstr ""

#: ../../jose/jwk.rst:45
msgid ""
"You may pass extra parameters into ``dumps`` method, available parameters"
" can be found on RFC7517 `Section 4`_."
msgstr ""

