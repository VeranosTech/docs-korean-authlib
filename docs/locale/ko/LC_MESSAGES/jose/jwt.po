# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Hsiaoming Ltd
# This file is distributed under the same license as the Authlib package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Authlib 0.12.dev\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-04-09 11:53+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../jose/jwt.rst:4
msgid "JSON Web Token (JWT)"
msgstr ""

#: ../../jose/jwt.rst:9
msgid ""
"JSON Web Token (JWT) is structured by :ref:`specs/rfc7515` or "
":`specs/rfc7516` with certain payload claims. The JWT implementation in "
"Authlib has all built-in algorithms via :ref:`specs/rfc7518`, it can also"
" load private/public keys of :ref:`specs/rfc7517`::"
msgstr ""

#: ../../jose/jwt.rst:26
msgid ""
"The imported ``jwt`` is an instance of :class:`JWT`. It has all supported"
" JWS algorithms, and it can handle JWK automatically. When "
":meth:`JWT.encode` a payload, JWT will check payload claims for security,"
" if you really want to expose them, you can always turn it off via "
"``check=False``."
msgstr ""

#: ../../jose/jwt.rst:32
msgid ""
"JWT payload with JWS is not encrypted, it is just signed. Anyone can "
"extract the payload without any private or public keys. Adding sensitive "
"data like passwords, social security numbers in JWT payload is not safe "
"if you are going to send them in a non-secure connection."
msgstr ""

#: ../../jose/jwt.rst:37
msgid ""
"You can also use JWT with JWE which is encrypted. But this feature is not"
" mature, documentation is not provided yet."
msgstr ""

#: ../../jose/jwt.rst:41
msgid "JWT Payload Claims Validation"
msgstr ""

#: ../../jose/jwt.rst:43
msgid ""
":meth:`JWT.decode` accepts 3 claims-related parameters: ``claims_cls``, "
"``claims_option`` and ``claims_params``. The default ``claims_cls`` is "
":class:`JWTClaims`. The ``decode`` method returns::"
msgstr ""

#: ../../jose/jwt.rst:49
msgid ""
"Claims validation is actually handled by :meth:`JWTClaims.validate`, "
"which validates payload claims with ``claims_option`` and "
"``claims_params``. For standard JWTClaims, ``claims_params`` value is not"
" used, but it is used in :class:`~authlib.oidc.core.IDToken`."
msgstr ""

#: ../../jose/jwt.rst:54
msgid "Here is an example of ``claims_option``::"
msgstr ""

#: ../../jose/jwt.rst:70
msgid "It is a dict configuration, the option key is the name of a claim."
msgstr ""

#: ../../jose/jwt.rst:72
msgid "**essential**: this value is REQUIRED."
msgstr ""

#: ../../jose/jwt.rst:73
msgid "**values**: claim value can be any one in the values list."
msgstr ""

#: ../../jose/jwt.rst:74
msgid "**value**: claim value MUST be the same value."
msgstr ""

#: ../../jose/jwt.rst:75
msgid "**validate**: a function to validate the claim value."
msgstr ""

