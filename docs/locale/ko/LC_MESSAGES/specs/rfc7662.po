# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Hsiaoming Ltd
# This file is distributed under the same license as the Authlib package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Authlib 0.12.dev\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-04-09 11:53+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../specs/rfc7662.rst:4
msgid "RFC7662: OAuth 2.0 Token Introspection"
msgstr ""

#: ../../specs/rfc7662.rst:6
msgid "API references on RFC7009 Authlib implementation."
msgstr ""

#: ../../specs/rfc7662.rst:9
msgid "This section contains the generic implementation of RFC7662_."
msgstr ""

#: ../../specs/rfc7662.rst:18
msgid "Register Introspection Endpoint"
msgstr ""

#: ../../specs/rfc7662.rst:20
msgid ""
"With the help of ``register_endpoint`` offered by "
":ref:`flask_oauth2_server`, we can easily add introspection endpoint to "
"the authorization server. But first, we need to implement the missing "
"methods::"
msgstr ""

#: ../../specs/rfc7662.rst:56
msgid "After the registration, we can create a response with::"
msgstr ""

#: ../../specs/rfc7662.rst:64
msgid "API Reference"
msgstr ""

#: authlib.oauth2.rfc7662.IntrospectionEndpoint:1 of
msgid "Implementation of introspection endpoint which is described in `RFC7662`_."
msgstr ""

#: authlib.oauth2.rfc7662.IntrospectionEndpoint.ENDPOINT_NAME:1 of
msgid "Endpoint name to be registered"
msgstr ""

#: authlib.oauth2.rfc7662.IntrospectionEndpoint.validate_endpoint_request:1 of
msgid ""
"The protected resource calls the introspection endpoint using an HTTP "
"``POST`` request with parameters sent as \"application/x-www-form-"
"urlencoded\" data. The protected resource sends a parameter representing "
"the token along with optional parameters representing additional context "
"that is known by the protected resource to aid the authorization server "
"in its response."
msgstr ""

#: authlib.oauth2.rfc7662.IntrospectionEndpoint.validate_endpoint_request:13 of
msgid "token"
msgstr ""

#: authlib.oauth2.rfc7662.IntrospectionEndpoint.validate_endpoint_request:9 of
msgid ""
"**REQUIRED**  The string value of the token. For access tokens, this is "
"the ``access_token`` value returned from the token endpoint defined in "
"OAuth 2.0. For refresh tokens, this is the ``refresh_token`` value "
"returned from the token endpoint as defined in OAuth 2.0."
msgstr ""

#: authlib.oauth2.rfc7662.IntrospectionEndpoint.validate_endpoint_request:16 of
msgid "token_type_hint"
msgstr ""

#: authlib.oauth2.rfc7662.IntrospectionEndpoint.validate_endpoint_request:16 of
msgid ""
"**OPTIONAL**  A hint about the type of the token submitted for "
"introspection."
msgstr ""

#: authlib.oauth2.rfc7662.IntrospectionEndpoint.create_endpoint_response:1 of
msgid "Validate introspection request and create the response."
msgstr ""

#: authlib.oauth2.rfc7662.IntrospectionEndpoint.create_endpoint_response of
msgid "Returns"
msgstr ""

#: authlib.oauth2.rfc7662.IntrospectionEndpoint.create_endpoint_response:3 of
msgid "(status_code, body, headers)"
msgstr ""

#: authlib.oauth2.rfc7662.IntrospectionEndpoint.query_token:1 of
msgid ""
"Get the token from database/storage by the given token string. Developers"
" should implement this method::"
msgstr ""

#: authlib.oauth2.rfc7662.IntrospectionEndpoint.introspect_token:1 of
msgid ""
"Read given token and return its introspection metadata as a dictionary "
"following `Section 2.2`_::"
msgstr ""

#: authlib.oauth2.rfc7662.IntrospectionEndpoint.authenticate_endpoint_client:1
#: of
msgid "Authentication client for endpoint with ``CLIENT_AUTH_METHODS``."
msgstr ""

