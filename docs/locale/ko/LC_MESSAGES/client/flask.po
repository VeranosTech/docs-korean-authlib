# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Hsiaoming Ltd
# This file is distributed under the same license as the Authlib package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Authlib 0.12.dev\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-04-09 11:53+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../client/flask.rst:4
msgid "Flask OAuth Client"
msgstr ""

#: ../../client/flask.rst:6
msgid "The built-in Flask integrations for OAuth 1.0 and OAuth 2.0 clients."
msgstr ""

#: ../../client/flask.rst:13
msgid "Looking for OAuth providers?"
msgstr ""

#: ../../client/flask.rst:15
msgid ":ref:`flask_oauth1_server`"
msgstr ""

#: ../../client/flask.rst:16
msgid ":ref:`flask_oauth2_server`"
msgstr ""

#: ../../client/flask.rst:18
msgid ""
"Flask OAuth client can handle OAuth 1 and OAuth 2 services. It shares a "
"similar API with Flask-OAuthlib, you can transfer your code from Flask-"
"OAuthlib to Authlib with ease. Here is how to `Migrate OAuth Client from "
"Flask-OAuthlib to Authlib <https://blog.authlib.org/2018/migrate-flask-"
"oauthlib-client-to-authlib>`_."
msgstr ""

#: ../../client/flask.rst:24
msgid "Create a registry with :class:`OAuth` object::"
msgstr ""

#: ../../client/flask.rst:30
msgid "You can initialize it later with :meth:`~OAuth.init_app` method::"
msgstr ""

#: ../../client/flask.rst:36
msgid "Configuration"
msgstr ""

#: ../../client/flask.rst:38
msgid ""
"To register a remote application on OAuth registry, using the "
":meth:`~OAuth.register` method::"
msgstr ""

#: ../../client/flask.rst:55
msgid ""
"The first parameter in ``register`` method is the **name** of the remote "
"application. You can access the remote application with::"
msgstr ""

#: ../../client/flask.rst:60
msgid ""
"The second parameter in ``register`` method is configuration. Every key "
"value pair can be omit. They can be configured in your Flask App "
"configuration. Config key is formatted with ``{name}_{key}`` in "
"uppercase, e.g."
msgstr ""

#: ../../client/flask.rst:65
msgid "TWITTER_CLIENT_ID"
msgstr ""

#: ../../client/flask.rst:65 ../../client/flask.rst:74
msgid "Twitter Consumer Key"
msgstr ""

#: ../../client/flask.rst:66
msgid "TWITTER_CLIENT_SECRET"
msgstr ""

#: ../../client/flask.rst:66 ../../client/flask.rst:75
msgid "Twitter Consumer Secret"
msgstr ""

#: ../../client/flask.rst:67
msgid "TWITTER_REQUEST_TOKEN_URL"
msgstr ""

#: ../../client/flask.rst:67
msgid "URL to fetch OAuth request token"
msgstr ""

#: ../../client/flask.rst:70
msgid ""
"If you register your remote app as ``oauth.register('example', ...)``, "
"the config key would look like:"
msgstr ""

#: ../../client/flask.rst:74
msgid "EXAMPLE_CLIENT_ID"
msgstr ""

#: ../../client/flask.rst:75
msgid "EXAMPLE_CLIENT_SECRET"
msgstr ""

#: ../../client/flask.rst:76
msgid "EXAMPLE_ACCESS_TOKEN_URL"
msgstr ""

#: ../../client/flask.rst:76
msgid "URL to fetch OAuth access token"
msgstr ""

#: ../../client/flask.rst:79
msgid ""
"The remote app that :meth:`OAuth.register` configured, is a subclass of "
":class:`~authlib.client.OAuthClient`. You can read more on "
":ref:`oauth_client`. There are hooks for OAuthClient, and flask "
"integration has registered them all for you."
msgstr ""

#: ../../client/flask.rst:84
msgid "Here is a full list of the configuration keys:"
msgstr ""

#: ../../client/flask.rst:86
msgid "``{name}_CLIENT_ID``: Client key of OAuth 1, or Client ID of OAuth 2"
msgstr ""

#: ../../client/flask.rst:87
msgid ""
"``{name}_CLIENT_SECRET``: Client secret of OAuth 2, or Client Secret of "
"OAuth 2"
msgstr ""

#: ../../client/flask.rst:88
msgid "``{name}_REQUEST_TOKEN_URL``: Request Token endpoint for OAuth 1"
msgstr ""

#: ../../client/flask.rst:89
msgid ""
"``{name}_REQUEST_TOKEN_PARAMS``: Extra parameters for Request Token "
"endpoint"
msgstr ""

#: ../../client/flask.rst:90
msgid "``{name}_ACCESS_TOKEN_URL``: Access Token endpoint for OAuth 1 and OAuth 2"
msgstr ""

#: ../../client/flask.rst:91
msgid "``{name}_ACCESS_TOKEN_PARAMS``: Extra parameters for Access Token endpoint"
msgstr ""

#: ../../client/flask.rst:92
msgid "``{name}_REFRESH_TOKEN_URL``: Refresh Token endpoint for OAuth 2 (if any)"
msgstr ""

#: ../../client/flask.rst:93
msgid ""
"``{name}_REFRESH_TOKEN_PARAMS``: Extra parameters for Refresh Token "
"endpoint"
msgstr ""

#: ../../client/flask.rst:94
msgid ""
"``{name}_AUTHORIZE_URL``: Endpoint for user authorization of OAuth 1 ro "
"OAuth 2"
msgstr ""

#: ../../client/flask.rst:95
msgid "``{name}_AUTHORIZE_PARAMS``: Extra parameters for Authorization Endpoint."
msgstr ""

#: ../../client/flask.rst:96
msgid "``{name}_API_BASE_URL``: A base URL endpoint to make requests simple"
msgstr ""

#: ../../client/flask.rst:97
msgid ""
"``{name}_CLIENT_KWARGS``: Extra keyword arguments for OAuth1Session or "
"OAuth2Session"
msgstr ""

#: ../../client/flask.rst:101
msgid "CLIENT_KWARGS"
msgstr ""

#: ../../client/flask.rst:103
msgid ""
"The ``{name}_CLIENT_KWARGS`` is a dict configuration to pass extra "
"parameters to ``OAuth1Session`` or ``OAuth2Session``."
msgstr ""

#: ../../client/flask.rst:106
msgid "For OAuth 1.0, you can pass extra parameters like::"
msgstr ""

#: ../../client/flask.rst:114
msgid "For OAuth 2.0, you can pass extra parameters like::"
msgstr ""

#: ../../client/flask.rst:122
msgid ""
"There are several ``token_endpoint_auth_method``, get a deep inside the "
":ref:`client_auth_methods`."
msgstr ""

#: ../../client/flask.rst:126
msgid "Database"
msgstr ""

#: ../../client/flask.rst:128
msgid ""
"If OAuth login is what you need ONLY, you don't need to configure a "
"database with ``fetch_token`` method."
msgstr ""

#: ../../client/flask.rst:131
msgid ""
"We need to ``fetch_token`` from database for later requests. Here is an "
"example on database schema design::"
msgstr ""

#: ../../client/flask.rst:164
msgid ""
"To send requests on behalf of the user, you need to save user's access "
"token into database after ``authorize_access_token``. Then use the access"
" token with ``fetch_token`` from database."
msgstr ""

#: ../../client/flask.rst:169
msgid "OAuth 1 Request Token"
msgstr ""

#: ../../client/flask.rst:171
msgid ""
"OAuth 1 requires a temporary request token for exchanging access token. "
"There should be a place to store these temporary information. If a cache "
"system is available, the ONLY thing you need to do is pass the cache "
"instance into OAuth registry. A ``cache`` interface MUST have methods:"
msgstr ""

#: ../../client/flask.rst:176
msgid "``.get(key)``"
msgstr ""

#: ../../client/flask.rst:177
msgid "``.set(key, value, expires=None)``"
msgstr ""

#: ../../client/flask.rst:179
msgid "Pass the ``cache`` instance into OAuth registry::"
msgstr ""

#: ../../client/flask.rst:188
msgid ""
"If cache system is not available, you can define methods for retrieving "
"and saving request token:"
msgstr ""

#: ../../client/flask.rst:216
msgid ""
"There is no \"request token\" in OAuth 2.0, you don't need to implement "
"this section if your are working on OAuth 2.0 integrations."
msgstr ""

#: ../../client/flask.rst:220
msgid "Flask OAuth Clients Routes"
msgstr ""

#: ../../client/flask.rst:222
msgid ""
"Let's take Twitter as an example, we need to define routes for login and "
"authorization::"
msgstr ""

#: ../../client/flask.rst:245
msgid ""
"There will be an issue with ``/profile`` since you our registry don't "
"know current user's Twitter access token. We need to design a "
"``fetch_token``, and grant it to the registry::"
msgstr ""

#: ../../client/flask.rst:272
msgid ""
"Since the OAuth registry can contain many services, it would be good "
"enough to share some common methods instead of defining them one by one. "
"Here are some hints::"
msgstr ""

#: ../../client/flask.rst:303
msgid ""
"We can share a ``fetch_token`` method at OAuth registry level when "
"initialization. Define a common ``fetch_token``::"
msgstr ""

#: ../../client/flask.rst:329
msgid ""
"With this common ``fetch_token`` in OAuth, you don't need to design the "
"method for each services one by one."
msgstr ""

#: ../../client/flask.rst:333
msgid "Auto Refresh Token"
msgstr ""

#: ../../client/flask.rst:335
msgid ""
"In OAuth 2, there is a concept of ``refresh_token``, Authlib can auto "
"refresh access token when it is expired. If the services you are using "
"don't issue any ``refresh_token`` at all, you don't need to do anything."
msgstr ""

#: ../../client/flask.rst:339
msgid ""
"Just like ``fetch_token``, we can define a ``update_token`` method for "
"each remote app or sharing it in OAuth registry::"
msgstr ""

#: ../../client/flask.rst:369
msgid "Code Challenge"
msgstr ""

#: ../../client/flask.rst:371
msgid ""
"Adding ``code_challenge`` provided by :ref:`specs/rfc7636` is simple. You"
" register your remote app with a ``code_challenge_method``::"
msgstr ""

#: ../../client/flask.rst:384
msgid "Note, the only supported ``code_challenge_method`` is ``S256``."
msgstr ""

#: ../../client/flask.rst:387
msgid "Compliance Fix"
msgstr ""

#: ../../client/flask.rst:389
msgid ""
"The :class:`RemoteApp` is a subclass of "
":class:`~authlib.client.OAuthClient`, they share the same logic for "
"compliance fix. Construct a method to fix requests session::"
msgstr ""

#: ../../client/flask.rst:402
msgid "When :meth:`OAuth.register` a remote app, pass it in the parameters::"
msgstr ""

#: ../../client/flask.rst:413
msgid "Find all the available compliance hooks at :ref:`compliance_fix_oauth2`."
msgstr ""

#: ../../client/flask.rst:416
msgid "Loginpass"
msgstr ""

#: ../../client/flask.rst:418
msgid ""
"There are many built-in integrations served by loginpass_, checkout the "
"``flask_example`` in loginpass project. Here is an example of GitHub::"
msgstr ""

#: ../../client/flask.rst:440
msgid ""
"The source code of loginpass is very simple, they are just preconfigured "
"services integrations."
msgstr ""

