# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Hsiaoming Ltd
# This file is distributed under the same license as the Authlib package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Authlib 0.12.dev\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-04-09 11:53+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../client/oauth2.rst:4
msgid "OAuth 2 Session"
msgstr ""

#: ../../client/oauth2.rst:6
msgid "An OAuth 2 implementation for requests Session, powered by Authlib."
msgstr ""

#: ../../client/oauth2.rst:12
msgid ""
"The :class:`OAuth2Session` in Authlib was designed to be compatible with "
"the one in **requests-oauthlib**. But now, there are some differences. "
"This section is a guide on how to obtain an access token in OAuth 2 flow."
msgstr ""

#: ../../client/oauth2.rst:17
msgid ""
"This ``OAuth2Session`` is a customized ``requests.Session``. It shares "
"the same API with requests. If you are using Flask, you may have "
"interests in :ref:`flask_client`. If you are using Django, please read "
":ref:`django_client`."
msgstr ""

#: ../../client/oauth2.rst:22
msgid ""
"If you are not familiar with OAuth 2.0, it is better to "
":ref:`understand_oauth2` now."
msgstr ""

#: ../../client/oauth2.rst:26
msgid "OAuth2Session for Authorization Code"
msgstr ""

#: ../../client/oauth2.rst:28
msgid ""
"There are two steps in OAuth 2 to obtain an access token with "
"authorization code grant type. Initialize the session for reuse::"
msgstr ""

#: ../../client/oauth2.rst:37
msgid ""
"You can assign a ``redirect_uri`` in case you want to specify the "
"callback url."
msgstr ""

#: ../../client/oauth2.rst:41
msgid "Redirect to Authorization Endpoint"
msgstr ""

#: ../../client/oauth2.rst:43
msgid ""
"Unlike OAuth 1, there is no request token. The first step is to jump to "
"the remote authorization server::"
msgstr ""

#: ../../client/oauth2.rst:51
msgid ""
"The :meth:`OAuth2Session.create_authorization_url` returns a tuple of "
"``(uri, state)``, in real project, you should save the state for later "
"use."
msgstr ""

#: ../../client/oauth2.rst:54
msgid ""
"Now head over to the generated authorization url, and grant the "
"authorization."
msgstr ""

#: ../../client/oauth2.rst:59
msgid "Fetch Access Token"
msgstr ""

#: ../../client/oauth2.rst:61
msgid ""
"The authorization server will redirect you back to your site with a code "
"and state arguments::"
msgstr ""

#: ../../client/oauth2.rst:66
msgid ""
"Use :meth:`OAuth2Session.fetch_access_token` to obtain access token. This"
" method will also verify the state in case of CSRF attack::"
msgstr ""

#: ../../client/oauth2.rst:79
msgid "Save this token to access users' protected resources."
msgstr ""

#: ../../client/oauth2.rst:81
msgid ""
"In real project, this session can not be re-used since you are redirected"
" to another website. You need to create another session yourself::"
msgstr ""

#: ../../client/oauth2.rst:88
msgid "Authlib has a built-in Flask/Django integration. Learn from them."
msgstr ""

#: ../../client/oauth2.rst:91
msgid "OAuth2Session for Implicit"
msgstr ""

#: ../../client/oauth2.rst:93
msgid ""
"OAuth2Session supports implicit grant type. It can fetch the access token"
" with the ``response_type`` of ``token``::"
msgstr ""

#: ../../client/oauth2.rst:100
msgid ""
"Visit this link, and grant the authorization, the OAuth authoirzation "
"server will redirect back to your redirect_uri, the response url would be"
" something like::"
msgstr ""

#: ../../client/oauth2.rst:105
msgid ""
"Fetch access token from the fragment with "
":meth:`OAuth2Session.fetch_access_token`:"
msgstr ""

#: ../../client/oauth2.rst:112
msgid "GitHub doesn't support ``token`` response type, try with other services."
msgstr ""

#: ../../client/oauth2.rst:116
msgid "OAuth2Session for Password"
msgstr ""

#: ../../client/oauth2.rst:118
msgid ""
"The ``password`` grant type is supported since Version 0.5. Use "
"``username`` and ``password`` to fetch the access token::"
msgstr ""

#: ../../client/oauth2.rst:124
msgid "OAuth2Session for Client Credentials"
msgstr ""

#: ../../client/oauth2.rst:126
msgid ""
"The ``client_credentials`` grant type is supported since Version 0.5. If "
"no ``code`` or no user info provided, it would be a "
"``client_credentials`` request. But it is suggested that you specify a "
"``grant_type`` for it::"
msgstr ""

#: ../../client/oauth2.rst:135
msgid "Client Authentication"
msgstr ""

#: ../../client/oauth2.rst:137
msgid ""
"When fetching access token, the authorization server will require a "
"client authentication, Authlib has provided a :class:`OAuth2ClientAuth` "
"which supports 3 methods defined by RFC7591:"
msgstr ""

#: ../../client/oauth2.rst:141
msgid "client_secret_basic"
msgstr ""

#: ../../client/oauth2.rst:142
msgid "client_secret_post"
msgstr ""

#: ../../client/oauth2.rst:143
msgid "none"
msgstr ""

#: ../../client/oauth2.rst:145
msgid ""
"The default value is ``client_secret_basic``. You can change the auth "
"method with ``token_endpoint_auth_method``::"
msgstr ""

#: ../../client/oauth2.rst:150
msgid ""
"If the authorization server requires other means of authentication, you "
"can construct an ``auth`` of requests, and pass it to "
"``fetch_access_token``::"
msgstr ""

#: ../../client/oauth2.rst:156
msgid ""
"It is also possible to extend the client authentication method with "
":meth:`~OAuth2Session.register_client_auth_method`. Besides the default "
"three authentication methods, there are more provided by Authlib. e.g."
msgstr ""

#: ../../client/oauth2.rst:160
msgid "client_secret_jwt"
msgstr ""

#: ../../client/oauth2.rst:161
msgid "private_key_jwt"
msgstr ""

#: ../../client/oauth2.rst:163
msgid ""
"These two methods are defined by RFC7523 and OpenID Connect. Find more in"
" :ref:`jwt_client_authentication`."
msgstr ""

#: ../../client/oauth2.rst:167
msgid "Access Protected Resources"
msgstr ""

#: ../../client/oauth2.rst:169
msgid ""
"Now you can access the protected resources. If you re-use the session, "
"you don't need to do anything::"
msgstr ""

#: ../../client/oauth2.rst:178
msgid ""
"The above is not the real flow, just like what we did in "
":ref:`fetch_oauth2_access_token`, we need to create another session "
"ourselves::"
msgstr ""

#: ../../client/oauth2.rst:191
msgid "Compliance Fix for non Standard"
msgstr ""

#: ../../client/oauth2.rst:193
msgid ""
"There are services that claimed they are providing OAuth API, but with a "
"little differences. Some services even return with the wrong Content "
"Type. Compliance hooks are provided to solve those problems:"
msgstr ""

#: ../../client/oauth2.rst:197
msgid "``access_token_response``: invoked before token parsing."
msgstr ""

#: ../../client/oauth2.rst:198
msgid "``refresh_token_response``: invoked before refresh token parsing."
msgstr ""

#: ../../client/oauth2.rst:199
msgid "``protected_request``: invoked before making a request."
msgstr ""

#: ../../client/oauth2.rst:201
msgid ""
"For instance, linkedin is using a ``oauth2_access_token`` parameter in "
"query string to protect users' resources, let's fix it::"
msgstr ""

#: ../../client/oauth2.rst:215
msgid ""
"If you find a non standard OAuth 2 services, and you can't fix it. Please"
" report it in GitHub issues."
msgstr ""

#: ../../client/oauth2.rst:220
msgid "OAuth 2 OpenID Connect"
msgstr ""

#: ../../client/oauth2.rst:222
msgid ""
"For services that support OpenID Connect, if a scope of ``openid`` is "
"provided, the authorization server will return a value of ``id_token`` in"
" response::"
msgstr ""

#: ../../client/oauth2.rst:231
msgid ""
"The remote server may require other parameters for OpenID Connect "
"requests, for instance, it may require a ``nonce`` parameter, in thise "
"case, you need to generate it yourself, and pass it to "
"``create_authorization_url``::"
msgstr ""

#: ../../client/oauth2.rst:240
msgid ""
"At the last step of ``session.fetch_access_token``, the return value "
"contains a ``id_token``::"
msgstr ""

#: ../../client/oauth2.rst:246
msgid ""
"This ``id_token`` is a JWT text, it can not be used unless it is parsed. "
"Authlib has provided tools for parsing and validating OpenID Connect "
"id_token::"
msgstr ""

#: ../../client/oauth2.rst:255
msgid ""
"Get deep inside with :class:`~authlib.jose.rfc7519.JWT` and "
":class:`~authlib.oidc.core.CodeIDToken`. Learn how to validate JWT claims"
" at :ref:`jwt_guide`."
msgstr ""

#: ../../client/oauth2.rst:261
msgid "AssertionSession"
msgstr ""

#: ../../client/oauth2.rst:263
msgid ""
":class:`AssertionSession` is a Requests Session for Assertion Framework "
"of OAuth 2.0 Authorization Grants. It is also know as service account. A "
"configured ``AssertionSession`` with handle token authorization "
"automatically, which means you can just use it."
msgstr ""

#: ../../client/oauth2.rst:268
msgid ""
"Take `Google Service Account`_ as an example, with the information in "
"your service account JSON configure file::"
msgstr ""

#: ../../client/oauth2.rst:299
msgid ""
"There is a ready to use ``GoogleServiceAccount`` in loginpass_. You can "
"also read these posts:"
msgstr ""

#: ../../client/oauth2.rst:302
msgid ""
"`Access Google Analytics API <https://blog.authlib.org/2018/access-"
"google-analytics-api>`_."
msgstr ""

#: ../../client/oauth2.rst:303
msgid ""
"`Using Authlib with gspread <https://blog.authlib.org/2018/authlib-for-"
"gspread>`_."
msgstr ""

